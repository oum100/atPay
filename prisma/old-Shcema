// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  email         String?   @unique
  emailVerified DateTime?
  name          String?
  image         String?
  password      String?

  accounts Account[]
  sessions Session[]
  stores   Store[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Store {
  id           Int           @id @default(autoincrement())
  name         String
  ownerId      Int
  owner        User          @relation(fields: [ownerId], references: [id])
  assets       Asset[]
  transactions Transaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model AssetType {
  id          Int     @id @default(autoincrement())
  code        String  @unique
  name        String
  description String?
  isActive    Boolean @default(true)

  assets Asset[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Asset {
  id      Int     @id @default(autoincrement())
  assetId String  @unique
  name    String
  typeId  Int
  status  String?
  storeId Int

  store     Store     @relation(fields: [storeId], references: [id])
  assetType AssetType @relation(fields: [typeId], references: [id])

  device  Device?
  machine Machine?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model DeviceType {
  id          Int     @id @default(autoincrement())
  code        String  @unique
  name        String
  description String?
  isActive    Boolean @default(true)

  devices Device[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model MachineType {
  id          Int     @id @default(autoincrement())
  code        String  @unique
  name        String
  description String?
  isActive    Boolean @default(true)

  machines Machine[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Device {
  id           Int    @id @default(autoincrement())
  macAddress   String @unique
  assetId      String @unique
  deviceTypeId Int?

  asset      Asset       @relation(fields: [assetId], references: [assetId])
  deviceType DeviceType? @relation(fields: [deviceTypeId], references: [id])

  configId Int?
  config   Config? @relation(fields: [configId], references: [id])

  products     ProductOnDevice[]
  transactions Transaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Machine {
  id            Int    @id @default(autoincrement())
  serialNumber  String @unique
  assetId       String @unique
  machineTypeId Int?

  asset       Asset        @relation(fields: [assetId], references: [assetId])
  machineType MachineType? @relation(fields: [machineTypeId], references: [id])

  brand              String?
  model              String?
  seller             String?
  sellerContact      String?
  warrantyExpireDate DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Config {
  id Int @id @default(autoincrement())

  wifiConfigId Int?
  wifiConfig   WifiConfig? @relation("WifiConfigRelation", fields: [wifiConfigId], references: [id])

  apiConfigId Int?
  apiConfig   ApiConfig? @relation("ApiConfigRelation", fields: [apiConfigId], references: [id])

  mqttConfigId Int?
  mqttConfig   MqttConfig? @relation("MqttConfigRelation", fields: [mqttConfigId], references: [id])

  devices Device[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model WifiConfig {
  id       Int    @id @default(autoincrement())
  ssid     String
  password String

  configs Config[] @relation("WifiConfigRelation")
}

model ApiConfig {
  id       Int    @id @default(autoincrement())
  host     String
  port     Int
  user     String
  password String

  configs Config[] @relation("ApiConfigRelation")
}

model MqttConfig {
  id       Int    @id @default(autoincrement())
  host     String
  port     Int
  user     String
  password String
  pubTopic String
  subTopic String

  configs Config[] @relation("MqttConfigRelation")
}

model ProductUnit {
  id          Int     @id @default(autoincrement())
  code        String  @unique
  name        String
  description String?
  isActive    Boolean @default(true)

  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Product {
  id     Int    @id @default(autoincrement())
  sku    String @unique
  name   String
  price  Float
  qty    Int
  unitId Int

  unit ProductUnit @relation(fields: [unitId], references: [id])

  devices      ProductOnDevice[]
  transactions Transaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model ProductOnDevice {
  id               Int    @id @default(autoincrement())
  productSku       String
  deviceMacAddress String

  product Product @relation(fields: [productSku], references: [sku])
  device  Device  @relation(fields: [deviceMacAddress], references: [macAddress])

  createdAt DateTime @default(now())
}

model Transaction {
  id            Int    @id @default(autoincrement())
  transactionId String @unique

  storeId           Int
  deviceMacAddress  String
  productSku        String
  paymentMethodId   Int
  paymentRequestId  Int?              @unique
  paymentResponseId Int?              @unique
  transactionStatus TransactionStatus
  quantity          Int               @default(1)
  unitPrice         Float
  totalPrice        Float
  errorMessage      String?
  paidAt            DateTime?

  store           Store            @relation(fields: [storeId], references: [id])
  device          Device           @relation(fields: [deviceMacAddress], references: [macAddress])
  product         Product          @relation(fields: [productSku], references: [sku])
  paymentMethod   PaymentMethod    @relation(fields: [paymentMethodId], references: [id])
  paymentRequest  PaymentRequest?  @relation(fields: [paymentRequestId], references: [id])
  paymentResponse PaymentResponse? @relation(fields: [paymentResponseId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model PaymentRequest {
  id          Int   @id @default(autoincrement())
  providerId  Int
  requestData Json?

  transaction     Transaction?
  paymentProvider PaymentProvider @relation(fields: [providerId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model PaymentResponse {
  id           Int   @id @default(autoincrement())
  providerId   Int
  responseData Json?

  transaction     Transaction?
  paymentProvider PaymentProvider @relation(fields: [providerId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model PaymentMethod {
  id          Int     @id @default(autoincrement())
  code        String  @unique
  name        String
  description String?
  isActive    Boolean @default(true)

  transactions Transaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model PaymentProvider {
  id          Int     @id @default(autoincrement())
  code        String  @unique
  name        String
  description String?
  isActive    Boolean @default(true)

  paymentRequests  PaymentRequest[]
  paymentResponses PaymentResponse[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum TransactionStatus {
  SUCCESS
  PENDING
  FAILED
  CANCELLED
}
